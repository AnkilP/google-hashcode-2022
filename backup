# def solve(contributors, tasks, day):
#     # Data
#     num_workers = len(contributors)
#     num_tasks = len(tasks)

#     # Solver
#     # Create the mip solver with the SCIP backend.
#     solver = pywraplp.Solver.CreateSolver('SCIP')

#     # Variables
#     # x[i, j] is an array of 0-1 variables, which will be 1
#     # if worker i is assigned to task j.
#     x = {}
#     for worker in range(num_workers):
#         for task in range(num_tasks):
#             x[worker, task] = solver.BoolVar(f'x[{worker},{task}]')

#     # # Constraints
#     # # The total size of the tasks each worker takes on is at most total_size_max.
#     # for worker in range(num_workers):
#     #     solver.Add(
#     #         solver.Sum([
#     #             task_sizes[task] * x[worker, task] for task in range(num_tasks)
#     #         ]) <= total_size_max)

#     # Each task is assigned to at most one worker.
#     for task in range(num_tasks):
#         solver.Add(
#             solver.Sum([x[worker, task] for worker in range(num_workers)]) <= 1)

#     # contribtor skill >= task skill
#     for task in range(num_tasks):
#         skill = tasks[task].skill
#         solver.Add(
#             [*x[worker, task]*contributors[worker].skill[skill] for worker in range(num_workers)] <= 1)

#     # Objective
#     objective_terms = []
#     for worker in range(num_workers):
#         for task in range(len(projects)):
#             latedays = max(0, day - projects[task].best_before)
#             objective_terms.append(projects[task].score - latedays * x[worker, task])
#     solver.Maximize(solver.Sum(objective_terms))

#     # Solve
#     status = solver.Solve()

#     solution = []
#     # Print solution.
#     if status == pywraplp.Solver.OPTIMAL or status == pywraplp.Solver.FEASIBLE:
#         print(f'Total cost = {solver.Objective().Value()}\n')
#         for worker in range(num_workers):
#             for task in range(num_tasks):
#                 if x[worker, task].solution_value() > 0.5:
#                     solution.append((contributors[worker], tasks[task]))
#     else:
#         print('No solution found.')